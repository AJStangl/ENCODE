__author__ = 'AJ'
import requests, json, pprint

def get_exp_url(search):
    """
    :param search: The endpoint url for searching encode.
    This script will take in a URL from encode and return a list of experiment URLS
    :return: exp_url_list
    """
    HEADERS = {'accept': 'application/json'}
    base_url = "https://www.encodeproject.org/"
    url = base_url+search
    r = requests.get(url, headers=HEADERS)
    encode_dict = r.json()
    exp_list = [] # contains end point
    exp_url_list = [] # contains full URL for experiment

    for elem in encode_dict["@graph"]:
        for k in elem:
            if elem["@id"] not in exp_list:
                exp_list.append(elem["@id"])

    for elem in exp_list:
        exp_url_list.append(base_url + elem)

    return exp_url_list


def metadata_extractor(exp_url_list):
    """
    This function extracts relevant metadata fields from an experiment and constructs a TSV file named
    that contains metadata for each experiment URL from encode
    :param exp_url_list: The Experiment list generated by get_exp_url
    :return: None
    : Write: metadata_data.txt
    """
    HEADERS = {'accept': 'application/json'}
    with open('metadata_encode.tsv', 'w') as metadata:
        metadata.write(
            "Name\tExperiment_Name\tDescription\tAssay\tBiological_Replicate\tTechnical_Replicate\t"
            "Cell_Type\tHealth_Status\tLife_Stage\tAge\tSex\tBio_Sample\tTarget\tAssembly\tGenome_Annotation"
            "\tOutput_Type\tLab\tDate"
            "\tVersion\tSource\tDownload_Link\tSource_Link\tSequencer\tRun_Type\tFile_Type\tBiosample_term_id"
            "\tFile_Size\n")

        for elem in exp_url_list:
            response = requests.get(elem, headers=HEADERS)
            exp_dict = response.json()

            i = 0

            while i < len(exp_dict["files"]): # Checks to see if annotation is present
                if exp_dict["files"][i]["file_type"] == "bam":

                    # Start Data Extraction
                    ###################################################################################################

                    # Filename
                    metadata.write(exp_dict["files"][i]["accession"] + "\t")

                    # Exp_Name
                    metadata.write(exp_dict["accession"] + "\t")

                    # Description
                    try:
                        if exp_dict["files"][i]["replicate"]["experiment"]["description"] != "":
                            metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["description"].replace("\n","").replace("\r","") + "\t")
                        else:
                            metadata.write("not listed" + "\t")
                    except KeyError:
                        if exp_dict["description"] != "":
                            metadata.write(exp_dict["description"] + "\t")
                        else:
                            metadata.write("not listed" + "\t")

                    # Assay
                    try:
                        if exp_dict["files"][i]["replicate"]["experiment"]["assay_term_name"] != "":
                            metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["assay_term_name"] + "\t")
                        else:
                            metadata.write("not listed" + "\t")
                    except KeyError:
                        if exp_dict["assay_term_name"] != "":
                            metadata.write(exp_dict["assay_term_name"] + "\t")
                        else:
                            metadata.write("not listed" + "\t")

                    # Biological Replicate
                    try:
                        metadata.write(str(exp_dict["files"][i]["replicate"]["biological_replicate_number"]) + "\t")

                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # Technical Replicate
                    try:
                        metadata.write(str(exp_dict["files"][i]["replicate"]["technical_replicate_number"]) + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # Cell_Type
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["biosample_term_name"] + "\t")
                    except KeyError:
                        metadata.write(exp_dict["biosample_term_name"] + "\t")

                    # Health
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["library"]["biosample"]["health_status"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")
                    # Life Stage
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["library"]["biosample"]["life_stage"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")
                    # Age
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["library"]["biosample"]["age"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")
                    # Sex
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["library"]["biosample"]["sex"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # Bio_Sample
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["biosample_type"] + "\t")
                    except KeyError:
                        metadata.write(exp_dict["biosample_type"] + "\t")

                    # Target
                    try:
                        metadata.write(exp_dict["target"]["label"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # Assembly
                    try:
                        metadata.write(exp_dict["files"][i]["assembly"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # Genome Annotation
                    try:
                        metadata.write(exp_dict["files"][i]["genome_annotation"] + "\t")
                    except (KeyError, IndexError):
                        metadata.write("not listed" + "\t")

                    #output_type
                    try:
                        metadata.write(exp_dict["files"][i]["output_type"] + "\t")

                    except (KeyError,IndexError):
                        metadata.write("not listed" + "\t")

                    # Lab
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["lab"]["title"] + "\t")
                    except KeyError:
                        metadata.write(exp_dict["files"][i]["lab"]["title"] + "\t")

                    # Date
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["date_released"] + "\t")
                    except KeyError:
                        metadata.write(exp_dict["files"][i]["date_created"] + "\t")

                    # Version
                    Version = str(1)
                    metadata.write(Version + "\t")

                    # Source
                    metadata.write(exp_dict["award"]["project"] + "\t")

                    # Download_Link
                    metadata.write("https://www.encodeproject.org" + exp_dict["files"][i]["href"] + "\t")

                    # Source_Link
                    metadata.write(elem + "\t")

                    # Sequencer
                    try:
                        metadata.write("Not Listed" + "\t")
                    except KeyError:
                        metadata.write(exp_dict["files"][i]["platform"]["title"] + "\t")

                    # Run_Type
                    try:
                        metadata.write(exp_dict["files"][i]["run_type"] + "\t")
                    except KeyError:
                        metadata.write("not listed" + "\t")

                    # File_Type
                    metadata.write(exp_dict["files"][i]["file_format"] + "\t")

                    # Biosample_Term_ID
                    try:
                        metadata.write(exp_dict["files"][i]["replicate"]["experiment"]["biosample_term_id"] + "\t")
                    except KeyError:
                        metadata.write(exp_dict["biosample_term_id"] + "\t")


                    # File_Size
                    fsize = (exp_dict["files"][i]["file_size"]*9.5367431640625e-07)
                    metadata.write(str(fsize))
                    metadata.write("\n")

                i += 1
    return


if __name__ == '__main__':
    exp_url_list = get_exp_url(search= "/search/?type=experiment&assay_term_name=ChIP-seq&status=released&assembly=hg19&limit=all")
    metadata_extractor(exp_url_list)

